name: cmake-macos

on:
  push:
    branches:
       - main
       - CI-cmake
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release


jobs:
  build-macos:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
           brew update
           brew install qt@5 cmake extra-cmake-modules stk tree
                    
    - name: Print parameters
      run: |
           mkdir -p ${{github.workspace}}/build/artifacts/
           echo ":: STK Headers ::"
           find /usr/local/Cellar/stk/4.6.2/ -iname *.h > ${{github.workspace}}/build/artifacts/stk-headers.txt
           echo ":: STK Libs ::"
           find /usr/local/Cellar/stk/4.6.2/ -iname *.a > ${{github.workspace}}/build/artifacts/stk-libs.txt
           echo ":: STK Qt5 CMake ::"
           find /usr/local/opt/qt@5/ -iname *.cmake > ${{github.workspace}}/build/artifacts/qt-cmake.txt
           echo ":: STK Qt5 Headers ::"
           find /usr/local/opt/qt@5/ -iname *.h > ${{github.workspace}}/build/artifacts/qt-headers-opt.txt
           echo ":: STK Qt5 Headers in Cellar::"
           find /usr/local/Cellar/qt@5/ -iname *.h > ${{github.workspace}}/build/artifacts/qt-headers-cellar.txt
           find /usr/local/Cellar/qt@5/ -iname *.cmake > ${{github.workspace}}/build/artifacts/qt-cmake-cellar.txt
           find /usr/local/Cellar/ -iname *gcc* | grep -i bin > ${{github.workspace}}/build/artifacts/cellar-gcc.txt
           find /usr/local/Cellar/ -iname *g++* | grep -i bin > ${{github.workspace}}/build/artifacts/cellar-g++.txt
           find /usr/local/Cellar/ -iname *ld* | grep -i bin > ${{github.workspace}}/build/artifacts/cellar-ld.txt
           find /usr/local/Cellar/ -iname *cmake* | grep -i bin > ${{github.workspace}}/build/artifacts/cellar-cmake.txt
           find /usr/local/Cellar/ > ${{github.workspace}}/build/artifacts/cellar-entire.txt
           tree -l --charset ascii /usr/local/Cellar/ > ${{github.workspace}}/build/artifacts/cellar-entire-tree.txt
           
    - name: Upload tuningTrainer-system-properties
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-system-properties
        path: ${{github.workspace}}/build/artifacts

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
           export LDFLAGS="-L/usr/local/Cellar/qt@5/5.15.3/lib/ -L /usr/local/Cellar/stk/4.6.2/lib/"
           export CXX="g++-10"
           export CXXFLAGS="-isystem/usr/local/Cellar/qt@5/5.15.3/include/ -I/usr/local/Cellar/stk/4.6.2/share/stk/src/include/"
           export CXXFLAGS="{CXXFLAGS} -isystem/usr/local/Cellar/qt@5/5.15.3/lib/QtWidgets.framework/Versions/5/Headers/"
           export PKG_CONFIG_PATH="/usr/local/Cellar/qt@5/5.15.3/lib/pkgconfig"
           export Qt5_DIR="/usr/local/Cellar/qt@5/5.15.3/lib/cmake/"
           /usr/local/Cellar/cmake/3.23.1_1/bin/cmake \
                  -B ${{github.workspace}}/build \
                  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                  -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${LDFLAGS}" \
                  -DCMAKE_MAKE_PROGRAM=""
                  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
                  -DCMAKE_INSTALL_PREFIX=/usr/

    - name: Build
      # Build your program with the given configuration
      run: |
           echo "Github workspace=${{github.workspace}}"
           echo "PWD=${PWD}"
           /usr/local/Cellar//cmake/3.23.1_1/bin/cmake \
                          --build ${{github.workspace}}/build \
                          --config ${{env.BUILD_TYPE}}
    
    - name: Build Package
      run: |
           cd ${{github.workspace}}/build
           mv bin tuningTrainer
           pushd tuningTrainer >/dev/null
           mkdir -p artifacts/tuningTrainer
           mkdir tuningTrainer.app
           macdeployqt tuningTrainer.app
           curl -fsSLO https://github.com/aurelien-rainone/macdeployqtfix/archive/master.zip
           bsdtar xf master.zip
           python macdeployqtfix-master/macdeployqtfix.py \
                     tuningTrainer.app/Contents/MacOS/tuningTrainer \
                     /usr/local/Cellar/qt@5/5.15.3/
           rm -rf macdeployqtfix-master master.zip
           popd >/dev/null
           bsdtar caf "tuningTrainer-mac.zip" tuningTrainer
           mv tuningTrainer-mac.zip artifacts/tuningTrainer/
    
    - name: Upload tuningTrainer-mac
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-mac
        path: ${{github.workspace}}/build/artifacts
        
