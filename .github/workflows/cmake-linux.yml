name: Build Linux

on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
           sudo apt-get update
           sudo apt-get install qt5-default zip
           sudo apt-get install stk libstk-dev
          
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build \
                  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                  -DCMAKE_INSTALL_PREFIX=/usr/
                  
    - name: Build
      # Build your program with the given configuration
      run: |
          echo ${{github.workspace}}
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Build Package
      run: |
           cd ${{github.workspace}}/build
           mkdir -p artifacts/tuningTrainer
           mkdir appdir/
           wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
           wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
           chmod +x linuxdeploy*.AppImage
           ./linuxdeploy-x86_64.AppImage \
                -e ./bin/tuningTrainer \
                -i ${{github.workspace}}/desktop/tuningTrainer-icon.svg \
                -d ${{github.workspace}}/desktop/tuningTrainer.desktop \
                --output appimage \
                --appdir appdir/ \
                --plugin qt
            cp tuningTrainer*.AppImage artifacts/tuningTrainer || echo "FAILED"
            cp ${{github.workspace}}/src/harpsichord.wav artifacts/tuningTrainer || echo "FAILED"
    
    - name: Upload tuningTrainer-linux
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-linux
        path: ${{github.workspace}}/build/artifacts
        

