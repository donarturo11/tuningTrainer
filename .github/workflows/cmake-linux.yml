name: cmake-linux

on:
  push:
    branches:
       - main
       - CI-cmake
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
           sudo apt-get update
           sudo apt-get install qt5-default
           sudo apt-get install stk libstk-dev
          
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
           echo ${{github.workspace}}
           cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Build Package
      run: |
           cd ${{github.workspace}}/build
           mkdir tuningTrainer/
           cp -v bin/tuningTrainer tuningTrainer/
           cp -v ${{github.workspace}}/src/harpsichord.wav tuningTrainer/
           tar -vczf tuningTrainer-bin.tar.gz tuningTrainer/
           rm -Rv tuningTrainer/
           mkdir ${{github.workspace}}/build/artifacts
           cp -v tuningTrainer-bin.tar.gz ${{github.workspace}}/build/artifacts/
           echo $(pwd)
           echo $(find -iname tuningTrainer-bin.tar.gz)

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        # Artifact name
        name: tuningTrainer-bin.tar.gz # optional
        # Destination path
        path: ${{github.workspace}}/build/artifacts/tuningTrainer-bin.tar.gz # optional
        
    #- name: Download a Build Artifact
    #  uses: actions/download-artifact@v3.0.0
    #  with:
    #    # Artifact name
    #    name: tuningTrainer-bin.tar.gz # optional
    #    # Destination path
    #    path: ${{github.workspace}}/build/artifacts/tuningTrainer-bin.tar.gz # optional
        
    - name: 'Echo download path'
      run: echo ${{steps.download.outputs.download-path}}
