name: cmake-windows

on:
  push:
    branches:
       - main
       - CI-cmake
  pull_request:
    branches: [ main ]

env:
  #  Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup Base MINGW env
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true

    - name: Setup MINGW env vars
      run: |
           echo "MINGW_RUNNER_TEMP=${RUNNER_TEMP//\\//}" >> $GITHUB_ENV
           echo "MINGW_ROOT=$(cd /; pwd -W)" >> $GITHUB_ENV
           
           
    - name: Print MINGW env vars
      run: |
           echo "MINGW_ROOT = ${{env.MINGW_ROOT}}"
           echo "MINGW_RUNNER_TEMP = ${{env.MINGW_RUNNER_TEMP}}"
           
    - name: Setup MinGW Build environment
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: base base-devel autoconf automake-wrapper dos2unix zip git mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake
    
    - name: Git checkout
      uses: actions/checkout@v3
      
    - name: Install qt5
      uses: msys2/setup-msys2@v2
      with:
         msystem: MINGW64
         install: mingw-w64-x86_64-qt5

    - name: Build and install stk
      run: |
           export LAST_PWD=${PWD}
           cd .github/mingw-deps/stk/
           dos2unix PKGBUILD
           makepkg-mingw -si --noconfirm
           cd $LAST_PWD
           pacman -Ql mingw-w64-x86_64-stk
              
    - name: Build
      # Build your program with the given configuration
      run: |
           echo $env || echo "This variable does not exist"
           mkdir build
           cd build
           cmake ..
           ninja
    
    - name: Build Package
      run: |
           cd ${{github.workspace}}/build
           mkdir tuningTrainer/
           cp -v bin/tuningTrainer tuningTrainer/
           cp -v ${{github.workspace}}/src/harpsichord.wav tuningTrainer/
           tar -vczf tuningTrainer-bin.tar.gz tuningTrainer/
           zip tuningTrainer-bin.zip tuningTrainer/
           rm -Rv tuningTrainer/ || echo 'already deleted'
           

    - name: Upload tuningTrainer-bin.tar.gz
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-bin.tar.gz
        path: ${{github.workspace}}/build/tuningTrainer-bin.tar.gz

    - name: Upload tuningTrainer-bin.zip
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-bin.zip
        path: ${{github.workspace}}/build/tuningTrainer-bin.zip
        
