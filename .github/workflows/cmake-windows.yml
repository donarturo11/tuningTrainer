name: cmake-windows

on:
  push:
    branches:
       - main
       - CI-cmake
  pull_request:
    branches: [ main ]

env:
  #  Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: dos2unix git mingw-w64-x86_64-toolchain cmake
    - name: Git checkout
      uses: actions/checkout@v3    
    - name: Install qt5
      uses: msys2/setup-msys2@v2
      with:
         msystem: MINGW64
         install: mingw-w64-x86_64-qt5
    - name: Build and install stk
      run: |
           export LAST_PWD=${PWD}
           cd .github/mingw-deps/stk/
           dos2unix PKGBUILD
           makepkg-mingw -si
           cd $LAST_PWD
    - name: Install dependencies
      run: |
           echo "deps"
          
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
           echo ${{github.workspace}}
           cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Build Package
      run: |
           cd ${{github.workspace}}/build
           mkdir tuningTrainer/
           cp -v bin/tuningTrainer tuningTrainer/
           cp -v ${{github.workspace}}/src/harpsichord.wav tuningTrainer/
           tar -vczf tuningTrainer-bin.tar.gz tuningTrainer/
           zip tuningTrainer-bin.zip tuningTrainer/
           rm -Rv tuningTrainer/ || echo 'already deleted'
           

    - name: Upload tuningTrainer-bin.tar.gz
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-bin.tar.gz
        path: ${{github.workspace}}/build/tuningTrainer-bin.tar.gz

    - name: Upload tuningTrainer-bin.zip
      uses: actions/upload-artifact@v3.0.0
      with:
        name: tuningTrainer-bin.zip
        path: ${{github.workspace}}/build/tuningTrainer-bin.zip
        
