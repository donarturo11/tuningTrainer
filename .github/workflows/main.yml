name: tuningTrainer

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, ci-qt6 ]
  create:
      tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  pkgname: tuningTrainer
  qt-version: 6.4.0

jobs:
  build:
    strategy:
      matrix:
       include:
        - { os: windows-latest, stk-prefix: "C:/STK", aqt-os: "windows", aqt-arch: "win64_msvc2019_64", aqt-prefix: "C:/Qt", aqt-module: "msvc2019_64" }
        - { os: ubuntu-latest, stk-prefix: "~/STK", aqt-os: "linux", aqt-arch: "gcc_64", aqt-prefix: "~/Qt", aqt-module: "gcc_64"}
        - { os: macos-latest, stk-prefix: "~/STK", aqt-os: "mac", aqt-arch: "", aqt-prefix: "~/Qt", aqt-module: "macos" }
    runs-on: ${{matrix.os}}

    steps:
    - name: Print Info
      run: |
           echo ${{runner.os}}
    - name: Install Qt6
      run: |
           pip3 install aqtinstall
           python3 -m aqt install-qt -O ${{matrix.aqt-prefix}} ${{matrix.aqt-os}} desktop ${{env.qt-version}} ${{matrix.aqt-arch}}

    - name: Install Linux Dependencies
      if: ${{runner.os=="Linux"}}
      run: |
           sudo apt-get update
           sudo apt-get install -y cmake-extras

    - name: Install STK
      run: |
           git clone https://github.com/donarturo11/stk -b cmake-install ../stk
           cmake -S ../stk -B ../stk/build -DCOMPILE_PROJECTS=0
           cmake --build ../stk/build
           cmake --install ../stk/build --prefix ${{matrix.stk-prefix}}

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Run Configure
      run: |
           cmake -S ${{github.workspace}} \
                 -B ${{github.workspace}}/build \
                 -DCMAKE_PREFIX_PATH={{matrix.aqt-prefix}}/${{env.qt-version}}/{{matrix.aqt-module}};${{matrix.stk-prefix}}

    - name: Compile Code
      run: cmake --build ${{github.workspace}}/build

    - name: Install
      run: cmake --install ${{github.workspace}}/build --prefix ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}

    - name: Upload All Binaries
      uses: actions/upload-artifact@v2
      with:
        name: build-${{runner.os}}
        path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}

  publish:
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Tag
        id: get_tag
        run: echo ::set-output name=BUILD_TAG::build-$(date +'%Y%m%d%H%M')

      - name: Get macOS Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}

      - name: Get Linux Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          
      - name: Get Windows Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}

      - if: github.event_name == 'push' # this is a snapshot build. create a release and upload binaries
        name: Create Snapshot Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          tag_name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          generate_release_notes: true
          prerelease: true
          files: |
            ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}/*
            ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}/*
            ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}/*

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        name: Find Existing Release
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          tag: ${{ github.ref_name }}

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload macOS binary
        name: Update Tagged Release (macOS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          asset_name: ${{env.pkgname}}-macOS
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Linux binary
        name: Update Tagged Release (Linux)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          asset_name: ${{env.pkgname}}-linux-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Windows binary
        name: Update Tagged Release (Windows)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}
          asset_name: ${{env.pkgname}}-win-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id == 0 # otherwise release does not exist, create one and upload binaries
        name: Create Tagged Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: false
          files: |
            ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}/*
            ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}/*
            ${{github.workspace}}/${{env.pkgname}}-{{runner.os}}/*
