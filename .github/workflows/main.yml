# Workflow tuningTrainer
name: tuningTrainer

on:
  pull_request:
    branches: [ ]
  push:
    branches: [ ]
#  create:
#      tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  pkgname: tuningTrainer
  qt-version: 6.4.2

jobs:
  build:
    strategy:
      matrix:
       include:
        #- { os: windows-latest, flags: "", shell: 'msys2 {0}', deps-prefix: "/opt/deps", aqt-os: "windows", aqt-arch: "win64_mingw", aqt-prefix: "/opt/Qt", aqt-module: "mingw_64" }
        - { os: ubuntu-latest, flags: "", shell: 'bash', deps-prefix: "/home/runner/deps", aqt-os: "linux", aqt-arch: "gcc_64", aqt-prefix: "/home/runner/Qt", aqt-module: "gcc_64"}
        #- { os: macos-latest, flags: "-DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\"", shell: 'bash', deps-prefix: "/Users/runner/deps", aqt-os: "mac", aqt-arch: "", aqt-prefix: "/Users/runner/Qt", aqt-module: "macos" }
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: ${{matrix.shell}}

    steps:
    - name: Install the Apple certificate and provisioning profile
      if: ${{runner.os == 'macOS'}}
      env:
          P12_CERTIFICATE_BASE64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo "IDENTITY_NAME=donarturo11.github.io" >> $GITHUB_ENV
          echo -n "$P12_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo "::notice:: decode certificate succeed"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign -T /usr/bin/productsign || echo "::warning:: Import certificate failed"
          security list-keychain -d user -s $KEYCHAIN_PATH || echo "::warning:: List keychain failed"
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security find-identity || echo "::warning:: List keychain failed"
          
    - if: ${{runner.os == 'Windows'}}
      name: Install MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        
    - if: ${{runner.os == 'Windows'}}
      name: Prepare MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        install: |
            base base-devel mingw-w64-ucrt-x86_64-toolchain p7zip zip git
            mingw-w64-ucrt-x86_64-python-pip
            mingw-w64-ucrt-x86_64-python-distutils-extra
            mingw-w64-ucrt-x86_64-python-psutil
            mingw-w64-ucrt-x86_64-cmake
    
    - name: Setup windows env
      if: ${{runner.os == 'Windows'}}
      run: |
           echo "::notify:: Upgrading pip"
           python3 -m pip install -U pip
           echo "SETUPTOOLS_USE_DISTUTILS=stdlib" >> $GITHUB_ENV
    
    - name: Print Info
      run: |
           echo "::notice:: ${{runner.os}}"
    
    - name: Install Linux Dependencies
      if: ${{runner.os == 'Linux'}}
      run: |
           sudo apt-get update
           sudo apt-get install -y cmake-extras libasound2-dev \
                                   libegl1-mesa-dev libfuse2 libpulse-dev 
           sudo apt-get install -y libunwind-dev \
                                   libgstreamer-plugins-base1.0-0 \
                                   libgstreamer-plugins-base1.0-dev \
                                   gstreamer1.0-libav \
                                   gstreamer1.0-plugins-good \
                                   gstreamer1.0-plugins-bad 
           sudo apt-get install -y libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
                                   libxcb-keysyms1-dev libxcb-randr0 \
                                   libxcb-render-util0 libxcb-shape0
    
    - name: Install AQT
      run: |    
           python3 -m pip install aqtinstall
           
    - name: Install Qt6
      run: |
           python3 -m aqt install-qt -O ${{matrix.aqt-prefix}} ${{matrix.aqt-os}} desktop ${{env.qt-version}} ${{matrix.aqt-arch}}
           python3 -m aqt install-qt -O ${{matrix.aqt-prefix}} ${{matrix.aqt-os}} desktop ${{env.qt-version}} ${{matrix.aqt-arch}} -m qtmultimedia
           python3 -m aqt install-qt -O ${{matrix.aqt-prefix}} ${{matrix.aqt-os}} desktop ${{env.qt-version}} ${{matrix.aqt-arch}} -m qtshadertools

    - name: Build and install ffmpeg plugin
      if: ${{runner.os == 'Linux'}} && ${{env.qt-version == "6.4.2"}}
      run: |
           SOURCE_FFMPEG=../qtmultimedia-everywhere-src-${{env.qt-version}}
           BUILD=../qtmultimedia-everywhere-src-${{env.qt-version}}/build/
           BUILD_FFMPEG=$BUILD/src/plugins/multimedia/ffmpeg/
           QT_DIR=${{env.AQTPATH}}/${{env.qt-version}}/${{matrix.aqt-module}}
           curl https://download.qt.io/official_releases/qt/6.4/${{env.qt-version}}/submodules/qtmultimedia-everywhere-src-${{env.qt-version}}.tar.xz | tar -xJ -C ..
           cmake -S $SOURCE_FFMPEG \
                 -B $BUILD \
                 -DCMAKE_PREFIX_PATH=$QT_DIR \
                 -DCMAKE_INSTALL_PREFIX=$QT_DIR
           cmake --build $BUILD_FFMPEG
           cmake --install $BUILD_FFMPEG
    
    - name: Install RtAudio
      run: |
           git clone https://github.com/thestk/rtaudio ../rtaudio
           cmake -S ../rtaudio -B ../rtaudio/build ${{matrix.flags}}
           cmake --build ../rtaudio/build
           cmake --install ../rtaudio/build --prefix ${{matrix.deps-prefix}}
           
    - name: Install STK
      run: |
           git clone https://github.com/thestk/stk ../stk
           cmake -S ../stk -B ../stk/build -DCOMPILE_PROJECTS=0 ${{matrix.flags}}
           cmake --build ../stk/build
           cmake --install ../stk/build --prefix ${{matrix.deps-prefix}}
    
    - name: Prepare FindCoreAudio
      if: ${{runner.os == 'macOS'}}
      run: |
           [[ ! -x ${{matrix.deps-prefix}}/share/cmake ]] && mkdir ${{matrix.deps-prefix}}/share/cmake
           cp -v ../stk/cmake/FindCoreAudio.cmake $(brew --prefix cmake)/share/cmake/Modules/

    - name: Checkout Repo
      uses: actions/checkout@v2
    
    - name: Prepare version
      run: |
          echo GITREV=$(git rev-parse --short HEAD) >> $GITHUB_ENV
          
    - name: Prepare workdir (UNIX)
      if: ${{runner.os != 'Windows'}}
      run: |
           export WORKDIR="${{github.workspace}}"
           export AQTPATH="${{matrix.aqt-prefix}}"
           export DEPSPATH="${{matrix.deps-prefix}}"
           echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV
           echo "AQTPATH=${AQTPATH}" >> $GITHUB_ENV
           echo "DEPSPATH=${DEPSPATH}" >> $GITHUB_ENV
           
           
    - name: Prepare workdir (MINGW)
      if: ${{runner.os == 'Windows'}}
      run: |
           export WORKDIR="$(cygpath -m "${{github.workspace}}")"
           export AQTPATH="$(cygpath -m "${{matrix.aqt-prefix}}")"
           export DEPSPATH="$(cygpath -m "${{matrix.deps-prefix}}")"
           echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV
           echo "AQTPATH=${AQTPATH}" >> $GITHUB_ENV
           echo "DEPSPATH=${DEPSPATH}" >> $GITHUB_ENV
    
    - name: Run Configure
      run: |
           if [ ${{ runner.os }} == "Linux" ]; then
               export INSTALL_PREFIX=${{env.WORKDIR}}/${{env.pkgname}}-${{runner.os}}/usr
           else
               export INSTALL_PREFIX=${{env.WORKDIR}}/${{env.pkgname}}-${{runner.os}}
           fi
           echo "INSTALL_PREFIX=$INSTALL_PREFIX" >> $GITHUB_ENV
           cmake -S "${{env.WORKDIR}}" \
                 -B "${{env.WORKDIR}}/build" ${{matrix.flags}} \
                 -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
                 -DCMAKE_PREFIX_PATH="${{env.AQTPATH}}/${{env.qt-version}}/${{matrix.aqt-module}};${{env.DEPSPATH}}" 
                 
    - name: Compile Code
      run: cmake --build ${{env.WORKDIR}}/build
      
    - name: Prepare appdir
      run: |
           if [ ${{ runner.os }} == "Windows" ]; then export SUFFIX="${{env.pkgname}}"
           elif [ ${{ runner.os }} == "macOS" ]; then export SUFFIX="${{env.pkgname}}.app"
           else export SUFFIX=""
           fi
           export APPDIR="${{env.INSTALL_PREFIX}}/${SUFFIX}"
           echo "APPDIR=${APPDIR}" >> $GITHUB_ENV
           echo "::notice:: appdir=${APPDIR}"
    
    - name: Install
      run: |
           cmake --install ${{env.WORKDIR}}/build --prefix ${{ env.INSTALL_PREFIX }}
    
    - name: macdeployqt
      if: ${{runner.os == 'macOS'}}
      run: |
           echo "::notice::$(find ${{env.WORKDIR}}/${{env.pkgname}}-${{runner.os}}/)"
           ${{matrix.aqt-prefix}}/${{env.qt-version}}/${{matrix.aqt-module}}/bin/macdeployqt \
                              ${{env.APPDIR}} 

    - name: windeployqt
      if: ${{runner.os == 'Windows'}}
      run: |
           cp -v ${{env.DEPSPATH}}/bin/*.dll ${{env.APPDIR}}/
           ${{matrix.aqt-prefix}}/${{env.qt-version}}/${{matrix.aqt-module}}/bin/windeployqt.exe ${{env.APPDIR}}/

    - name: linuxdeploy
      if: ${{runner.os == 'Linux'}}
      run: | 
           sudo bash -c "echo ${{matrix.aqt-prefix}}/${{env.qt-version}}/${{matrix.aqt-module}}/lib > /etc/ld.so.conf.d/aqt.conf"
           sudo bash -c "echo ${{matrix.deps-prefix}}/lib > /etc/ld.so.conf.d/deps.conf"
           sudo rm /etc/ld.so.cache
           sudo ldconfig
           wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
           wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
           wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
           LINUXDEPLOY=linuxdeploy-x86_64.AppImage
           chmod +x *.AppImage
           APPDIR=${{env.pkgname}}.AppDir
           ICONFILE=$(find ${{ env.APPDIR }} -name *.png)
           DESKTOPFILE=$(find ${{env.APPDIR}} -name *.desktop)
           EXECFILE=$(find ${{env.APPDIR}} -name ${{env.pkgname}} -type f -executable)
           export QTDIR=${{matrix.aqt-prefix}}/${{env.qt-version}}/${{matrix.aqt-module}}
           export QMAKE=${QTDIR}/bin/qmake 
           export QT_INSTALL_PLUGINS=${QTDIR}/plugins/
           export EXTRA_QT_PLUGINS=multimedia
           export QT_MEDIA_BACKEND=ffmpeg
           ./${LINUXDEPLOY} \
               --appdir=${APPDIR} -v3 \
               --executable=${EXECFILE} \
               --icon-file=${ICONFILE} \
               --desktop-file=${DESKTOPFILE} \
               --output=appimage \
               --plugin qt
           export APPIMAGEDIR=${{github.workspace}}/${{env.pkgname}}-${{runner.os}}-AppImage
           mkdir $APPIMAGEDIR
           find . -name "${{env.pkgname}}*.AppImage" -exec cp -v {} $APPIMAGEDIR \;
           echo "APPIMAGEDIR=${APPIMAGEDIR}" >> $GITHUB_ENV

    - name: Add missing audio libraries
      if: ${{runner.os == 'macOS'}}
      run: |
           find ${{env.DEPSPATH}} -name "*.dylib" -exec cp {} ${{env.APPDIR}}/Contents/Frameworks \;

    - name: Codesign (macOS)
      if: ${{runner.os == 'macOS'}}
      run: |
           codesign --verbose --strict --continue --timestamp --force --deep -s donarturo11.github.io ${{env.APPDIR}}

    - name: Test (macOS)
      if: ${{runner.os == 'macOS'}}
      run: |
           find ${{env.APPDIR}}
           codesign -dv -r- ${{env.APPDIR}}
           codesign -vv ${{env.APPDIR}}
                     
#    - name: Setup tmate session
#      uses: mxschmitt/action-tmate@v3
#      if: ${{ failure() }}
#      #if: ${{runner.os == 'macOS'}}
#      with:
#          limit-access-to-actor: true
#          #install-dependencies: false
#      timeout-minutes: 60

    - name: Upload All Binaries
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.pkgname}}-${{runner.os}}
        path: ${{github.workspace}}/${{env.pkgname}}-${{runner.os}}
        
#    - name: Upload DMG
#      if: ${{runner.os == 'macOS'}}
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{env.pkgname}}-${{runner.os}}-DMG
#        path: ${{github.workspace}}/${{env.DMGDIR}}
        
    - name: Upload AppImage
      if: ${{runner.os == 'Linux'}}
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.pkgname}}-${{runner.os}}-AppImage
        path: ${{ env.APPIMAGEDIR }}
        
    - name: Print variables
      run: |
          echo "::notice:: github.event_name = ${{ github.event_name }}"
          echo "::notice:: github.ref = ${{ github.ref }}"

  publish:
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Tag
        id: get_tag
        run: echo ::set-output name=BUILD_TAG::build-$(date +'%Y%m%d%H%M')

      - name: Get macOS Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-macOS
          path: ${{github.workspace}}/${{env.pkgname}}-macOS

      - name: Get Linux Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-Linux
          path: ${{github.workspace}}/${{env.pkgname}}-Linux
          
      - name: Get Windows Binary
        uses: actions/download-artifact@v2
        with:
          name: ${{github.workspace}}/${{env.pkgname}}-Windows
          path: ${{github.workspace}}/${{env.pkgname}}-Windows

      - if: github.event_name == 'push' # this is a snapshot build. create a release and upload binaries
        name: Create Snapshot Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          tag_name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          generate_release_notes: true
          prerelease: true
          files: |
            ${{github.workspace}}/${{env.pkgname}}-Windows/*
            ${{github.workspace}}/${{env.pkgname}}-Linux/*
            ${{github.workspace}}/${{env.pkgname}}-macOS/*

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        name: Find Existing Release
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          tag: ${{ github.ref_name }}

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload macOS binary
        name: Update Tagged Release (macOS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-${{runner.os}}
          asset_name: ${{env.pkgname}}-macOS
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Linux binary
        name: Update Tagged Release (Linux)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-Linux
          asset_name: ${{env.pkgname}}-linux-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Windows binary
        name: Update Tagged Release (Windows)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{env.pkgname}}-Windows
          asset_name: ${{env.pkgname}}-win-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id == 0 # otherwise release does not exist, create one and upload binaries
        name: Create Tagged Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: false
          files: |
            ${{github.workspace}}/${{env.pkgname}}-macOS*
            ${{github.workspace}}/${{env.pkgname}}-Windows*
            ${{github.workspace}}/${{env.pkgname}}-Linux*
