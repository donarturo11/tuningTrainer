name: tuningTrainer

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, ci-qt6 ]
  create:
      tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  QT_Version: 6.4.0
  common_cmake_flags: -S ${{github.workspace}} -B ${{github.workspace}}/build

jobs:
  build:
    strategy:
      matrix:
       include:
        - { os: windows-latest, stk-prefix: 'C:\STK', aqt-os: windows, aqt-arch: 'win64_msvc2019_64', aqt-path: C:\Qt, cmake-flags: '-DCMAKE_PREFIX_PATH=C:\Qt\${{matrix.QT_Version}}\msvc2019;C:\STK'}
        - { os: ubuntu-latest, stk-prefix: '~/STK', aqt-os: linux, aqt-arch: '', aqt-path: ~/Qt, cmake-flags: "-DCMAKE_PREFIX_PATH=~/Qt/${{matrix.QT_Version}}/gcc_64;~/STK" }
        - { os: macos-latest, stk-prefix: '~/STK', aqt-os: macos, aqt-arch: 'macos', aqt-path: ~/Qt, cmake-flags: "-DCMAKE_PREFIX_PATH=~/Qt/${{matrix.QT_Version}}/macos;~/STK" }
    runs-on: ${{matrix.os}}

    steps:
    - name: Install Qt6
      run: |
           pip install aqtinstall
           python -m pip install aqtinstall
           python -m aqt install-qt -O ${{matrix.aqt-path}} ${{matrix.aqt-os}} desktop ${{matrix.QT_Version}} ${{matrix.aqt-arch}}

    - name: Install STK
      run: |
           git clone https://github.com/donarturo11/stk -b cmake-install
           cmake -S ../stk -B ../stk/build -DCOMPILE_PROJECTS=0
           cmake --build ../stk/build
           cmake --install ../stk/build --prefix ${{matrix.stk-prefix}}

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Run Configure
      run: cmake -S . -B build ${{matrix.cmake-flags}}

    - name: Compile Code
      run: cmake --build build/

    - name: Install
      run: cmake --install build/ --prefix build/

    - name: Upload All Binaries
      uses: actions/upload-artifact@v2
      with:
        name: build-${{runner.os}}
        path: |
          src/${{matrix.bin}}

  publish:
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Tag
        id: get_tag
        run: echo ::set-output name=BUILD_TAG::build-$(date +'%Y%m%d%H%M')

      - name: Get macOS Binary
        uses: actions/download-artifact@v2
        with:
          name: build-macOS
          path: build-macOS

      - name: Get Linux Binary
        uses: actions/download-artifact@v2
        with:
          name: build-Linux
          path: build-Linux
          
      - name: Get Windows Binary
        uses: actions/download-artifact@v2
        with:
          name: build-Windows
          path: build-Windows

      - if: github.event_name == 'push' # this is a snapshot build. create a release and upload binaries
        name: Create Snapshot Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          tag_name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          generate_release_notes: true
          prerelease: true
          files: |
            build-macOS/*
            build-Linux/*
            build-Windows/*

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        name: Find Existing Release
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          tag: ${{ github.ref_name }}

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload macOS binary
        name: Update Tagged Release (macOS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: build-macOS/tuningTrainer-macOS-x86_64
          asset_name: tuningTrainer-macOS-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Linux binary
        name: Update Tagged Release (Linux)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: build-Linux/emusc-linux-x86_64
          asset_name: tuningTrainer-linux-x86_64
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # release exists - upload Windows binary
        name: Update Tagged Release (Windows)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.find_release.outputs.upload_url }}
          asset_path: build-Windows/emusc-win32-x86_64.exe
          asset_name: tuningTrainer-win32-x86_64.exe
          asset_content_type: application/octet-stream

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id == 0 # otherwise release does not exist, create one and upload binaries
        name: Create Tagged Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: false
          files: |
            build-macOS/*
            build-Linux/*
            build-Windows/*
